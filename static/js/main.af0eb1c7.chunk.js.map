{"version":3,"sources":["services/accountServices.js","services/coinServices.js","components/CustomTable.js","components/AccountBalance.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","timeout","headers","getAll","a","get","response","data","pingServer","getAllCoinsForCurrency","currency","getCoin","id","getCoinHistory","date","columns","title","dataIndex","key","sorter","compare","b","balanceAmount","multiple","convertedBalance","defaultSortOrder","marketCap","marketCapRank","CustomTable","accounts","dataSource","rowKey","account","AccountBalance","total","App","useState","setAccounts","coins","setCoins","setDate","totalAccountValue","setTotalAccountValue","modifiedAccs","setModifiedAccs","useEffect","accountService","then","fetchedAccounts","console","log","catch","error","coinService","modifyAccounts","accountCurrencies","map","acc","name","substring","toLowerCase","commonCoins","filter","coin","includes","symbol","sort","localeCompare","modifiedAccounts","i","length","converted","Number","balance","amount","current_price","toFixed","market_cap","market_cap_rank","getHistoryForCoin","toString","format","onChange","dateString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2SAKMA,EAAWC,IAAMC,OAAO,CAC5BC,QALc,kDAMdC,QAAS,IACTC,QAAS,CAAE,+BALX,2vBAiCa,GAAEC,OAzBL,uCAAG,4BAAAC,EAAA,sEACUP,EAASQ,IAAI,aADvB,cACPC,EADO,yBAENA,EAASC,MAFH,2CAAH,sDCRNC,EAAU,uCAAG,4BAAAJ,EAAA,sEACMN,IAAMO,IAAN,UAHT,mCAGS,UADN,cACXC,EADW,yBAEVA,EAASC,MAFC,2CAAH,qDAKVE,EAAsB,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACNN,IAAMO,IAAN,UART,mCAQS,sCAAkDK,EAAlD,+DADM,cACvBJ,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAsBb,GAAEC,aAAYG,QAjBhB,uCAAG,WAAOC,GAAP,eAAAR,EAAA,sEACSN,IAAMO,IAAN,UAbT,mCAaS,kBAA8BO,IADvC,cACRN,EADQ,yBAEPA,EAASC,MAFF,2CAAH,sDAiByBE,yBAAwBI,eAP1C,uCAAG,WAAOD,EAAIE,GAAX,eAAAV,EAAA,sEACEN,IAAMO,IAAN,UAvBT,mCAuBS,kBAA8BO,EAA9B,yBAAiDE,IADnD,cACfR,EADe,yBAEdA,EAASC,MAFK,2CAAH,yD,SChBdQ,G,OAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,UACPC,UAAW,gBACXC,IAAK,gBACLC,OAAQ,CACNC,QAAS,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAEkB,cAAgBD,EAAEC,eACvCC,SAAU,IAGd,CACEP,MAAO,YACPC,UAAW,mBACXC,IAAK,mBACLC,OAAQ,CACNC,QAAS,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAEoB,iBAAmBH,EAAEG,kBAC1CD,SAAU,GAEZE,iBAAkB,WAEpB,CACET,MAAO,aACPC,UAAW,YACXC,IAAK,YACLC,OAAQ,CACNC,QAAS,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAEsB,UAAYL,EAAEK,WACnCH,SAAU,IAGd,CACEP,MAAO,kBACPC,UAAW,gBACXC,IAAK,gBACLC,OAAQ,CACNC,QAAS,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAEuB,cAAgBN,EAAEM,eACvCJ,SAAU,MAuBDK,EAbK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAErB,OACE,kBAAC,IAAD,CACEC,WAAYD,EACZd,QAASA,EACTgB,OAAQ,SAACC,GAAD,OAAaA,EAAQpB,OCnDpBqB,EAVQ,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAGvB,OACE,6BACE,oDAA0BA,EAA1B,U,SC8GSC,EA5GH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTP,EADS,KACCQ,EADD,OAEUD,mBAAS,IAFnB,mBAETE,EAFS,KAEFC,EAFE,OAGQH,mBAAS,IAHjB,mBAGTtB,EAHS,KAGH0B,EAHG,OAIkCJ,mBAAS,GAJ3C,mBAITK,EAJS,KAIUC,EAJV,OAKwBN,mBAAS,IALjC,mBAKTO,EALS,KAKKC,EALL,KAUhBC,qBAAU,WACRC,EACG3C,SACA4C,MAAK,SAACC,GACLX,EAAYW,GACZC,QAAQC,IAAIF,MAEbG,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAIE,QAC/B,IAKHP,qBAAU,WACRQ,EACG5C,uBAAuB,OACvBsC,MAAK,SAACT,GAAD,OAAWC,EAASD,MACzBa,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAIE,QAC/B,IAEHP,qBAAU,WACRD,EAAgBU,QAMlB,IAAMA,EAAiB,WAErB,IAAIC,EAAoB1B,EAAS2B,KAAI,SAACC,GAAD,OACnCA,EAAIC,KAAKC,UAAU,EAAG,GAAGC,iBAIvBC,EAAcvB,EACfwB,QAAO,SAACC,GAAD,OAAUR,EAAkBS,SAASD,EAAKE,WACjDC,MAAK,SAAC9D,EAAGiB,GAAJ,OAAUjB,EAAE6D,OAAOE,cAAc9C,EAAE4C,WAEvCG,EAAmBvC,EAEvBuC,EAAiBF,MAAK,SAAC9D,EAAGiB,GAAJ,OACpBjB,EAAEsD,KACCC,UAAU,EAAG,GACbC,cACAO,cAAc9C,EAAEqC,KAAKC,UAAU,EAAG,GAAGC,kBAI1C,IADA,IAAI1B,EAAQ,EACHmC,EAAI,EAAGA,EAAIR,EAAYS,OAAQD,IAAK,CAE3C,IAAIE,EACFC,OAAOJ,EAAiBC,GAAGI,QAAQC,QACnCb,EAAYQ,GAAGM,cAEjBP,EAAiBC,GAAG7C,iBAAmB+C,EAAUK,QAAQ,GAEzD1C,GAAgBqC,EAEhBH,EAAiBC,GAAG/C,cAAgB8C,EAAiBC,GAAGI,QAAQC,OAGhEN,EAAiBC,GAAG3C,UAAYmC,EAAYQ,GAAGQ,WAC/CT,EAAiBC,GAAG1C,cAAgBkC,EAAYQ,GAAGS,gBAOrD,OAJApC,EAAqBR,EAAM0C,QAAQ,IAI5BR,GAQHW,EAAoB,SAACnE,EAAIE,GAC7BuC,EACGxC,eAAeD,EAAIE,GACnBiC,MAAK,SAACzC,GACL2C,QAAQC,IAAI5C,MAEb6C,OAAM,SAACC,GAAD,OAAWH,QAAQC,IAAIE,OAGlC,OACE,6BACE,sDACA,0DACA,6CAAmBtC,EAAKkE,YACxB,kBAAC,IAAD,CAAYC,OAvGC,aAuGmBC,SAnBf,SAACpE,EAAMqE,GAC1B3C,EAAQ2C,GACRJ,EAAkB,UAAWI,MAkB3B,kBAAC,EAAD,CAAgBjD,MAAOO,IACvB,kBAAC,EAAD,CAAaZ,SAAUc,MCpGTyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM+C,c","file":"static/js/main.af0eb1c7.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"https://fintech-webinar-2020-api.vercel.app/api\";\r\nconst token =\r\n  \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik0wTXhNVEEzTVVFeU5rRkZSREZGTnpSRE1VUXdPVVU0TXpBNFF6QkdRVVF6UkVSRE1VSTNSUSJ9.eyJpc3MiOiJodHRwczovL3N0YWNjeC5ldS5hdXRoMC5jb20vIiwic3ViIjoiejQ0RGdzWVFKREtyNTRCcmZvU0x3c2pLWWRtUDRLdWtAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vc3RhY2MuZmludGVjaCIsImlhdCI6MTYwMTIwNTAwNywiZXhwIjoxNjAzNzk3MDA3LCJhenAiOiJ6NDREZ3NZUUpES3I1NEJyZm9TTHdzaktZZG1QNEt1ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fBvgUGcc1zS3eStbdGo19mLC6KqOdMeBdo_xuZEBz9jCzllRfrgqIhPbys5Se2XreGxu5_6oKWlXbqDOvnbuvjTJKnhoO9Aom1meUjqbQgaROeN0hbmPxVDKF-JDtOdZbAWtZv1ds9bWF0zqo9Z7ogicZ0eUi8FnEA2h2I6peVQPL9cJJwSfhjXPW73Ws4e6c0vynnhXLc5BcQgst0iaMZd4n3tdruzP_bgEY5GqbKvJxHjL2KNHh933VZSZdx_7mf4imsgsed2AL1QkIkqj5lvf_niyzrEmOLs_K_rSOZqRzO0c1u9wxrCK7qlryzpv8nz3C3zXfNdnMQHOejOFpQ\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: baseUrl,\r\n  timeout: 3000, //if request takes longer than 3 seconds, don't complete it.\r\n  headers: { \"Authorization\" : `Bearer ${token}`},\r\n});\r\n\r\nconst getAll = async () => {\r\n  const response = await instance.get(\"/accounts\");\r\n  return response.data;\r\n};\r\n/*\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst deleteEntry = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n*/\r\nexport default { getAll };\r\n","import axios from \"axios\";\r\nconst baseUrl = \"https://api.coingecko.com/api/v3\";\r\n\r\nconst pingServer = async () => {\r\n  const response = await axios.get(`${baseUrl}/ping`);\r\n  return response.data;\r\n};\r\n\r\nconst getAllCoinsForCurrency = async (currency) => {\r\n  const response = await axios.get(`${baseUrl}/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=100&page=1&sparkline=false`)\r\n  return response.data;\r\n}\r\n\r\nconst getCoin = async (id) => {\r\n  const response = await axios.get(`${baseUrl}/coins/${id}`);\r\n  return response.data;\r\n}\r\n\r\n/**\r\n * Gets history for a given cryptocurrency. \r\n * @param {*} id id of the coin, e.g. \"bitcoin\"\r\n * @param {*} date the date for which to show historic data. format: \"dd-mm-yyyy\"\r\n */\r\nconst getCoinHistory = async (id, date) => {\r\n  const response = await axios.get(`${baseUrl}/coins/${id}/history?date=${date}`);\r\n  return response.data;\r\n}\r\n\r\n\r\n\r\nexport default { pingServer, getCoin, getAllCoinsForCurrency, getCoinHistory };\r\n","import React from \"react\";\r\nimport { Table } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst defaultSort = (a, b) => a-b;\r\n\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n  },\r\n  {\r\n    title: \"Balance\",\r\n    dataIndex: \"balanceAmount\",\r\n    key: \"balanceAmount\",\r\n    sorter: {\r\n      compare: (a, b) => a.balanceAmount - b.balanceAmount,\r\n      multiple: 2,\r\n    },\r\n  },\r\n  {\r\n    title: \"NOK Value\",\r\n    dataIndex: \"convertedBalance\",\r\n    key: \"convertedBalance\",\r\n    sorter: {\r\n      compare: (a, b) => a.convertedBalance - b.convertedBalance,\r\n      multiple: 1,\r\n    },\r\n    defaultSortOrder: \"descend\"\r\n  },\r\n  {\r\n    title: \"Market Cap\",\r\n    dataIndex: \"marketCap\",\r\n    key: \"marketCap\",\r\n    sorter: {\r\n      compare: (a, b) => a.marketCap - b.marketCap,\r\n      multiple: 3,\r\n    },\r\n  },\r\n  {\r\n    title: \"Market Cap Rank\",\r\n    dataIndex: \"marketCapRank\",\r\n    key: \"marketCapRank\",\r\n    sorter: {\r\n      compare: (a, b) => a.marketCapRank - b.marketCapRank,\r\n      multiple: 4,\r\n    },\r\n     \r\n  },\r\n];\r\n\r\n/**\r\n * A wrapper class to customize our table\r\n * @param {*} accounts our data source. \r\n */\r\nconst CustomTable = ({ accounts }) => {\r\n\r\n  return (\r\n    <Table\r\n      dataSource={accounts}\r\n      columns={columns}\r\n      rowKey={(account) => account.id}\r\n      \r\n    />\r\n  );\r\n};\r\n\r\n\r\nexport default CustomTable;","import React from \"react\";\r\n\r\nconst AccountBalance = ({total}) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h3>Total account value: {total} NOK</h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountBalance;","import React, { useState, useEffect } from \"react\";\nimport accountService from \"./services/accountServices\";\nimport coinService from \"./services/coinServices\";\nimport CustomTable from \"./components/CustomTable\";\nimport AccountBalance from \"./components/AccountBalance\";\nimport { DatePicker } from \"antd\";\n\nconst dateFormat = \"DD-MM-YYYY\";\n\nconst App = () => {\n  const [accounts, setAccounts] = useState([]);\n  const [coins, setCoins] = useState([]);\n  const [date, setDate] = useState(\"\");\n  const [totalAccountValue, setTotalAccountValue] = useState(0);\n  const [modifiedAccs, setModifiedAccs] = useState([]);\n\n  /**\n   * Fetches all accounts\n   */\n  useEffect(() => {\n    accountService\n      .getAll()\n      .then((fetchedAccounts) => {\n        setAccounts(fetchedAccounts);\n        console.log(fetchedAccounts);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  /**\n   * Fetches all coins for the given currency\n   */\n  useEffect(() => {\n    coinService\n      .getAllCoinsForCurrency(\"nok\")\n      .then((coins) => setCoins(coins))\n      .catch((error) => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    setModifiedAccs(modifyAccounts())\n  })\n\n  /**\n   * Modifies the accounts array by converting currency and adding some extra info.\n   */\n  const modifyAccounts = () => {\n    //get all currencies in accounts.\n    let accountCurrencies = accounts.map((acc) =>\n      acc.name.substring(0, 3).toLowerCase()\n    );\n\n    //get all common currencies from the large list of coins. sort it alphabetically.\n    let commonCoins = coins\n      .filter((coin) => accountCurrencies.includes(coin.symbol))\n      .sort((a, b) => a.symbol.localeCompare(b.symbol));\n\n    let modifiedAccounts = accounts;\n    //sort all accounts.\n    modifiedAccounts.sort((a, b) =>\n      a.name\n        .substring(0, 3)\n        .toLowerCase()\n        .localeCompare(b.name.substring(0, 3).toLowerCase())\n    );\n\n    let total = 0;\n    for (let i = 0; i < commonCoins.length; i++) {\n      //adds a new field \"convertedBalance\" to each account.\n      let converted =\n        Number(modifiedAccounts[i].balance.amount) *\n        commonCoins[i].current_price;\n\n      modifiedAccounts[i].convertedBalance = converted.toFixed(2);\n\n      total = total + converted;\n      //Also moving out the balance.amount field so that antDesign table kan read it.\n      modifiedAccounts[i].balanceAmount = modifiedAccounts[i].balance.amount;\n\n      //adding market cap fields\n      modifiedAccounts[i].marketCap = commonCoins[i].market_cap;\n      modifiedAccounts[i].marketCapRank = commonCoins[i].market_cap_rank;\n    }\n\n    setTotalAccountValue(total.toFixed(2));\n\n\n    //return an array sorted on the converted currency\n    return modifiedAccounts;\n  };\n\n  const onDateChange = (date, dateString) => {\n    setDate(dateString);\n    getHistoryForCoin(\"bitcoin\", dateString);\n  };\n\n  const getHistoryForCoin = (id, date) => {\n    coinService\n      .getCoinHistory(id, date)\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <div>\n      <h1>Stacc Coding Challenge</h1>\n      <h2>My Cryptocurrency accounts</h2>\n      <p>Selected date: {date.toString()}</p>\n      <DatePicker format={dateFormat} onChange={onDateChange} />\n      <AccountBalance total={totalAccountValue} />\n      <CustomTable accounts={modifiedAccs} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}