{"version":3,"sources":["services/accountServices.js","services/coinServices.js","components/CustomTable.js","components/AccountBalance.js","components/HistoricPrices.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","timeout","headers","getAll","a","get","response","data","pingServer","getAllCoinsForCurrency","currency","getCoin","id","getCoinHistory","date","formatter","Intl","NumberFormat","style","columns","title","dataIndex","key","sorter","compare","b","balanceAmount","multiple","convertedBalance","defaultSortOrder","render","format","marketCap","marketCapRank","CustomTable","accounts","dataSource","rowKey","account","expandable","expandedRowRender","margin","coinId","created_at","AccountBalance","total","disabledDates","current","valueOf","Date","now","HistoricPrices","onDateChange","selectedDate","historicValue","textToShow","onChange","disabledDate","App","useState","setAccounts","coins","setCoins","setDate","totalAccountValue","setTotalAccountValue","modifiedAccs","setModifiedAccs","historicAccountValue","setHistoricAccountValue","useEffect","accountService","then","fetchedAccounts","console","log","catch","error","coinService","modifyAccounts","accountCurrencies","map","acc","name","substring","toLowerCase","commonCoins","filter","coin","includes","symbol","sort","localeCompare","modifiedAccounts","i","length","converted","Number","balance","amount","current_price","toFixed","market_cap","market_cap_rank","totalHistory","nokValue","market_data","nok","padding","dateString","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0726f6aa.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"https://fintech-webinar-2020-api.vercel.app/api\";\r\n//token should normally not be exposed like this. use dotenv()\r\nconst token =\r\n  \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik0wTXhNVEEzTVVFeU5rRkZSREZGTnpSRE1VUXdPVVU0TXpBNFF6QkdRVVF6UkVSRE1VSTNSUSJ9.eyJpc3MiOiJodHRwczovL3N0YWNjeC5ldS5hdXRoMC5jb20vIiwic3ViIjoiejQ0RGdzWVFKREtyNTRCcmZvU0x3c2pLWWRtUDRLdWtAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vc3RhY2MuZmludGVjaCIsImlhdCI6MTYwMTIwNTAwNywiZXhwIjoxNjAzNzk3MDA3LCJhenAiOiJ6NDREZ3NZUUpES3I1NEJyZm9TTHdzaktZZG1QNEt1ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fBvgUGcc1zS3eStbdGo19mLC6KqOdMeBdo_xuZEBz9jCzllRfrgqIhPbys5Se2XreGxu5_6oKWlXbqDOvnbuvjTJKnhoO9Aom1meUjqbQgaROeN0hbmPxVDKF-JDtOdZbAWtZv1ds9bWF0zqo9Z7ogicZ0eUi8FnEA2h2I6peVQPL9cJJwSfhjXPW73Ws4e6c0vynnhXLc5BcQgst0iaMZd4n3tdruzP_bgEY5GqbKvJxHjL2KNHh933VZSZdx_7mf4imsgsed2AL1QkIkqj5lvf_niyzrEmOLs_K_rSOZqRzO0c1u9wxrCK7qlryzpv8nz3C3zXfNdnMQHOejOFpQ\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: baseUrl,\r\n  timeout: 3000, //if request takes longer than 3 seconds, don't complete it.\r\n  headers: { \"Authorization\" : `Bearer ${token}`},\r\n});\r\n\r\nconst getAll = async () => {\r\n  const response = await instance.get(\"/accounts\");\r\n  return response.data;\r\n};\r\n/*\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst deleteEntry = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n*/\r\nexport default { getAll };\r\n","import axios from \"axios\";\r\nconst baseUrl = \"https://api.coingecko.com/api/v3\";\r\n\r\nconst pingServer = async () => {\r\n  const response = await axios.get(`${baseUrl}/ping`);\r\n  return response.data;\r\n};\r\n\r\nconst getAllCoinsForCurrency = async (currency) => {\r\n  const response = await axios.get(`${baseUrl}/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=100&page=1&sparkline=false`)\r\n  return response.data;\r\n}\r\n\r\nconst getCoin = async (id) => {\r\n  const response = await axios.get(`${baseUrl}/coins/${id}`);\r\n  return response.data;\r\n}\r\n\r\n/**\r\n * Gets history for a given cryptocurrency. \r\n * @param {*} id id of the coin, e.g. \"bitcoin\"\r\n * @param {*} date the date for which to show historic data. format: \"dd-mm-yyyy\"\r\n */\r\nconst getCoinHistory = async (id, date) => {\r\n  const response = await axios.get(`${baseUrl}/coins/${id}/history?date=${date}`);\r\n  return response.data;\r\n}\r\n\r\n\r\n\r\nexport default { pingServer, getCoin, getAllCoinsForCurrency, getCoinHistory };\r\n","import React from \"react\";\r\nimport { Table } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst formatter = new Intl.NumberFormat('no-NO', {\r\n  style: 'currency',\r\n  currency: 'NOK',\r\n});\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n  },\r\n  {\r\n    title: \"Balance\",\r\n    dataIndex: \"balanceAmount\",\r\n    key: \"balanceAmount\",\r\n    sorter: {\r\n      compare: (a, b) => a.balanceAmount - b.balanceAmount,\r\n      multiple: 2,\r\n    },\r\n  },\r\n  {\r\n    title: \"NOK Value\",\r\n    dataIndex: \"convertedBalance\",\r\n    key: \"convertedBalance\",\r\n    sorter: {\r\n      compare: (a, b) => a.convertedBalance - b.convertedBalance,\r\n      multiple: 1,\r\n    },\r\n    defaultSortOrder: \"descend\",\r\n    render: convertedBalance => (\r\n      <p>{formatter.format(convertedBalance)}</p>\r\n    )\r\n  },\r\n  {\r\n    title: \"Market Cap\",\r\n    dataIndex: \"marketCap\",\r\n    key: \"marketCap\",\r\n    sorter: {\r\n      compare: (a, b) => a.marketCap - b.marketCap,\r\n      multiple: 3,\r\n    },\r\n    render: marketCap => (\r\n      <p>{formatter.format(marketCap)}</p>\r\n    )\r\n  },\r\n  {\r\n    title: \"Market Cap Rank\",\r\n    dataIndex: \"marketCapRank\",\r\n    key: \"marketCapRank\",\r\n    sorter: {\r\n      compare: (a, b) => a.marketCapRank - b.marketCapRank,\r\n      multiple: 4,\r\n    },\r\n     \r\n  },\r\n];\r\n\r\n/**\r\n * A wrapper class to customize our table\r\n * @param {*} accounts our data source. \r\n */\r\nconst CustomTable = ({ accounts }) => {\r\n\r\n  return (\r\n    <Table\r\n      dataSource={accounts}\r\n      columns={columns}\r\n      rowKey={(account) => account.id}\r\n      expandable={{\r\n        expandedRowRender: account => <p style={{margin: 0}}>Coin ID: {account.coinId} <br/> Wallet id: {account.id} <br/> Created: {account.created_at}</p>\r\n      }}\r\n      \r\n    />\r\n  );\r\n};\r\n\r\n\r\nexport default CustomTable;","import React from \"react\";\r\n\r\nconst AccountBalance = ({total}) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h3>Current total value: {total}</h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountBalance;","import React from \"react\";\r\nimport { DatePicker } from \"antd\";\r\n\r\n\r\n\r\nconst dateFormat = \"DD-MM-YYYY\";\r\n\r\nconst disabledDates = (current) => {\r\n  return current && current.valueOf() > Date.now();\r\n};\r\n\r\nconst HistoricPrices = ({ onDateChange, selectedDate, historicValue }) => {\r\n\r\n  const textToShow = selectedDate === \"\" ? \"\" : `On ${selectedDate}, the account was worth a total of ${historicValue} `\r\n  return (\r\n    <div>\r\n      <h3>Select date to view historic prices:</h3>\r\n      <DatePicker format={dateFormat} onChange={onDateChange} disabledDate={disabledDates}/>\r\n      <p>{textToShow}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HistoricPrices;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport accountService from \"./services/accountServices\";\r\nimport coinService from \"./services/coinServices\";\r\nimport CustomTable from \"./components/CustomTable\";\r\nimport AccountBalance from \"./components/AccountBalance\";\r\nimport HistoricPrices from \"./components/HistoricPrices\";\r\n\r\nconst formatter = new Intl.NumberFormat('no-NO', {\r\n  style: 'currency',\r\n  currency: 'NOK',\r\n});\r\n\r\nconst App = () => {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [coins, setCoins] = useState([]);\r\n  const [date, setDate] = useState(\"\");\r\n  const [totalAccountValue, setTotalAccountValue] = useState(0);\r\n  const [modifiedAccs, setModifiedAccs] = useState([]);\r\n  const [historicAccountValue, setHistoricAccountValue] = useState(0);\r\n\r\n  /**\r\n   * Fetches all accounts\r\n   */\r\n  useEffect(() => {\r\n    accountService\r\n      .getAll()\r\n      .then((fetchedAccounts) => {\r\n        setAccounts(fetchedAccounts);\r\n        console.log(fetchedAccounts);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  /**\r\n   * Fetches all coins for the given currency\r\n   */\r\n  useEffect(() => {\r\n    coinService\r\n      .getAllCoinsForCurrency(\"nok\")\r\n      .then((coins) => setCoins(coins))\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    \r\n    setModifiedAccs(modifyAccounts());\r\n  });\r\n\r\n  /**\r\n   * Modifies the accounts array by converting currency and adding some extra info.\r\n   */\r\n  const modifyAccounts = () => {\r\n    //get all currencies in accounts.\r\n    let accountCurrencies = accounts.map((acc) =>\r\n      acc.name.substring(0, 3).toLowerCase()\r\n    );\r\n\r\n    //get all common currencies from the large list of coins. sort it alphabetically.\r\n    let commonCoins = coins\r\n      .filter((coin) => accountCurrencies.includes(coin.symbol))\r\n      .sort((a, b) => a.symbol.localeCompare(b.symbol));\r\n\r\n    let modifiedAccounts = accounts;\r\n    //sort all accounts.\r\n    modifiedAccounts.sort((a, b) =>\r\n      a.name\r\n        .substring(0, 3)\r\n        .toLowerCase()\r\n        .localeCompare(b.name.substring(0, 3).toLowerCase())\r\n    );\r\n\r\n    let total = 0;\r\n    for (let i = 0; i < commonCoins.length; i++) {\r\n      //adds a new field \"convertedBalance\" to each account.\r\n      let converted =\r\n        Number(modifiedAccounts[i].balance.amount) *\r\n        commonCoins[i].current_price;\r\n\r\n      modifiedAccounts[i].convertedBalance = converted.toFixed(2);\r\n\r\n      total += converted;\r\n\r\n      //Also moving out the balance.amount field so that antDesign table kan read it.\r\n      modifiedAccounts[i].balanceAmount = modifiedAccounts[i].balance.amount;\r\n\r\n      //adding market cap fields\r\n      modifiedAccounts[i].marketCap = commonCoins[i].market_cap;\r\n      modifiedAccounts[i].marketCapRank = commonCoins[i].market_cap_rank;\r\n\r\n      //adding the id from commonCoins for use with gecko API to fetch history\r\n      modifiedAccounts[i].coinId = commonCoins[i].id;\r\n    }\r\n\r\n    setTotalAccountValue(formatter.format(total));\r\n\r\n    //return an array sorted on the converted currency\r\n    return modifiedAccounts;\r\n  };\r\n\r\n  const handleDateChange = (date, dateString) => {\r\n    console.log(date, dateString)\r\n    setDate(dateString);\r\n    totalHistory(dateString);\r\n  };\r\n\r\n  const totalHistory = (date) => {\r\n    let total = 0;\r\n\r\n    if (date) {\r\n      for (let i = 0; i < modifiedAccs.length; i++) {\r\n        coinService\r\n          .getCoinHistory(modifiedAccs[i].coinId, date)\r\n          .then((response) => {\r\n            let nokValue =\r\n              response.market_data.current_price.nok *\r\n              modifiedAccs[i].balanceAmount;\r\n            total = total + nokValue;\r\n            setHistoricAccountValue(formatter.format(total));\r\n          })\r\n          .catch((error) => console.log(error));\r\n      }\r\n    } else {\r\n      console.log(\"cleared date\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{padding: \"15px\"}}>\r\n        <h1>Stacc Coding Challenge</h1>\r\n        <h2>My Cryptocurrency accounts</h2>\r\n        <HistoricPrices\r\n          onDateChange={handleDateChange}\r\n          selectedDate={date}\r\n          historicValue={historicAccountValue}\r\n        />\r\n        <AccountBalance total={totalAccountValue} />\r\n      </div>\r\n      <CustomTable accounts={modifiedAccs} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}